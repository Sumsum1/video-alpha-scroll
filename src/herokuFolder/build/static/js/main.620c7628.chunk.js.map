{"version":3,"sources":["profile.webm","Back_lines.png","2900_CMYK.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","movieRef","useRef","className","onWheel","e","c","current","currentTime","muted","ref","src","movie","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAAe,G,MCAA,I,KCAA,IFAA,IAA0B,sC,OGwF1BA,MA/Ef,WAEI,MAAsCC,mBAAS,GAA/C,mBACA,GADA,UACyBA,oBAAS,IAAlC,mBACA,GADA,UAC8BA,oBAAS,IAAvC,mBACA,GADA,UAC8BA,oBAAS,IAAvC,mBACA,GADA,UAC0BA,oBAAS,IAAnC,mBACMC,GADN,UACiBC,oBAqDjB,OACE,qBAAKC,UAAU,kBAAf,SACI,uBACEA,UAAU,aACVC,QAzBa,SAACC,GAClB,IAAMC,EAAIL,EAASM,QAAQC,YAC3BP,EAASM,QAAQC,YAAcF,EAAI,MAwB/BG,OAAO,EACPC,IAAKT,EACLU,IAAKC,OChEFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.620c7628.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile.583cba5d.webm\";","export default __webpack_public_path__ + \"static/media/Back_lines.a68e79fc.png\";","export default __webpack_public_path__ + \"static/media/2900_CMYK.c7b85fd4.png\";","// import './App.css';\r\nimport './Test.css';\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport hub from './Back_lines.png';\r\nimport * as Images from './Anim_png';\r\nimport a  from './2900_CMYK.png';\r\nimport { images } from './Anim_png';\r\nimport movie from './profile.webm';\r\n\r\nfunction App() {\r\n\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [stop1, setSop1]  =useState(false);\r\n    const [reverse, setReverse] = useState(false);\r\n    const [forward, setForward] = useState(true);\r\n    const [play1, setPlay1] = useState(false);\r\n    const movieRef = useRef();\r\n\r\n    // useEffect(() => {\r\n    //   if (play1) {\r\n    //     movieRef.current.play();\r\n\r\n    //     //Pause\r\n    //     // setTimeout(() => {\r\n    //     //   movieRef.current.pause();\r\n    //     // })\r\n    //   }\r\n         \r\n    // }, [play1])\r\n\r\n\r\n\r\n    // const onTimeUpdate = (e) => {\r\n      \r\n    //     if (e.target.currentTime >= 8.8) {\r\n    //       setReverse(true);\r\n    //     }\r\n    //     if (reverse) {\r\n    //       const c = movieRef.current.currentTime;\r\n    //       movieRef.current.currentTime = c - 0.05;\r\n    //     }\r\n    //     if (movieRef.current.currentTime <= 0) {\r\n    //       setReverse(false);\r\n    //       const c = movieRef.current.currentTime;\r\n    //       movieRef.current.currentTime = c + 0.05;\r\n    //     } \r\n    // }\r\n\r\n    const onTimeUpdate = (e) => {\r\n        const c = movieRef.current.currentTime;\r\n        movieRef.current.currentTime = c + 0.104;\r\n  }\r\n\r\n\r\n    // const onScrollDirection = (e) => {\r\n    //   if (e.deltaY > 0) {\r\n    //     onTimeUpdate();\r\n    //     //setPlay1(true);\r\n    //     console.log('up')\r\n    //     console.log(play1)\r\n    //   }\r\n    //   if (e.deltaY < 0) {\r\n    //     console.log('down')\r\n    //   }\r\n    // }\r\n\r\n\r\n\r\n    \r\n    return (\r\n      <div className='container-video'>\r\n          <video \r\n            className='video-room' \r\n            onWheel={onTimeUpdate}  \r\n            muted={true} \r\n            ref={movieRef} \r\n            src={movie} \r\n            //onTimeUpdate={onTimeUpdate}\r\n            \r\n            \r\n      >\r\n            \r\n          </video>\r\n          {/* <h1>dfgdrtgstybhryrtnrshsrty</h1> */}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import './App.css';\r\n// import './Test.css';\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import ReactPlayer from 'react-player';\r\n// import movie from './Bathroom.mp4';\r\n\r\n// function App() {\r\n\r\n//     const [currentTime, setCurrentTime] = useState(0);\r\n//     const [stop1, setSop1]  =useState(false);\r\n//     const [reverse, setReverse] = useState(false);\r\n//     const [forward, setForward] = useState(true);\r\n//     const movieRef = useRef();\r\n    \r\n\r\n\r\n//     const getCurrentTime = () => {\r\n//       setCurrentTime(7);\r\n\r\n//       console.log(movieRef.currentTime)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n\r\n//     },)\r\n\r\n\r\n\r\n//     const onTimeUpdate = (e) => {\r\n      \r\n//         if (e.target.currentTime >= 8.8) {\r\n//           setReverse(true);\r\n//         }\r\n//         if (reverse) {\r\n//           const c = movieRef.current.currentTime;\r\n//           movieRef.current.currentTime = c - 0.05;\r\n//         }\r\n//         if (movieRef.current.currentTime <= 0) {\r\n//           setReverse(false);\r\n//           const c = movieRef.current.currentTime;\r\n//           movieRef.current.currentTime = c + 0.05;\r\n//         } \r\n//     }\r\n\r\n\r\n//     const onScrollDirection = (e) => {\r\n//       if (e.deltaY > 0) {\r\n//         console.log('up')\r\n\r\n//       }\r\n//       if (e.deltaY < 0) {\r\n//         console.log('down')\r\n//       }\r\n//     }\r\n\r\n\r\n//     const onClick = () => {\r\n//       console.log('Start');\r\n//     }\r\n\r\n//     const onWheel = (e) => {\r\n//       e.target.play();\r\n//     }\r\n    \r\n//     return (\r\n//       <div className='video-room'>\r\n//           <ReactPlayer\r\n//              url={movie} \r\n//              muted={false}\r\n//              playing={true}\r\n       \r\n//              onClick={onClick}\r\n//              width={'100wh'} \r\n//              height={'900px'}  \r\n//              onWheel={onWheel}   \r\n//              controls  \r\n//              ref={movieRef} \r\n//              onTimeUpdate={onTimeUpdate} \r\n\r\n//       />\r\n//       </div>\r\n//   )\r\n// }\r\n\r\n// export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}